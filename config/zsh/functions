#  ______                _   _                 
#  |  ___|              | | (_)                
#  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
#  |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#  | | | |_| | | | | (__| |_| | (_) | | | \__ \
#  \_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
                                            
#!/usr/bin/zsh

# Access GOGH COLORS
function gogh() {
	   bash -c  "$(wget -qO- https://git.io/vQgMr)"
}

# Start an app & disown it
function nhd() {
    nohup "$@" > /dev/null 2>&1 &
    disown
}

# Create a new directory and enter it
function mkd() {
   	mkdir -p "$@" && cd "$_";
}

# Extract different typess of files
function extr() {
  if [[ $# != 2 ]]; then
    echo "Usage: extr <FILE_NAME> <FILE_TYPE>"
    return 1
  fi

  local file_name=$1
  local file_type=$2

  case "$file_type" in
    "zip")
      target="${file_name%.zip}"
      unzip "$file_name" -d "${target##*/}"
      ;;
    "tar")
      tar -xvf "$file_name"
      ;;
    "tar.gz")
      tar -xzvf "$file_name"
      ;;
    "tar.bz2")
      tar -xjvf "$file_name"
      ;;
    "gz")
      gunzip "$file_name"
      ;;
    "bz2")
      bunzip2 "$file_name"
      ;;
    "rar")
      unrar x "$file_name"
      ;;
    "7z")
      7z x "$file_name"
      ;;
    "iso")
      mount_dir="${file_name%.iso}_mount"
      mkdir -p "$mount_dir"
      sudo mount -o loop "$file_name" "$mount_dir"
      ;;
    "riso")
      mount_dir="${file_name%.iso}_mount"
      if mountpoint -q "$mount_dir"; then
          sudo umount "$mount_dir"
          rmdir "$mount_dir"
          echo "ISO unmounted and $mount_dir removed"
      else
          echo "$mount_dir is not mounted"
      fi
      ;;
    *)
      echo "ERROR: Unknown file type $file_type"
      return 1
      ;;
  esac
}

# Controling the home server
function rsl() {
    case "$1" in
        status)
            bash -c "~/.scripts/home_server_status.sh"
            ;;
        scp-get)
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo "Usage: rsl scp <user> <full_remote_path>"
                return 1
            fi
            scp -P 4812 "$2@rsl-server.duckdns.org:$3" ~/Public/
            ;;
        scp-send)
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo "Usage: rsl scp-send <local_file> <remote_user>:<full_remote_path>"
                return 1
            fi
            scp -P 4812 "$2" "$3@rsl-server.duckdns.org:$3"
            ;;
        nas)
            sudo mount -t cifs //192.168.0.93/Share-o5-13 /mnt/SummaModusOperandi -o rw,_netdev,credentials=/home/o5-14/.smbcreds,x-systemd.automount,uid=1000,gid=1000,port=4455
            ;;
        smb)
            sudo mount -t cifs //rsl-server.duckdns.org/Share-o5-13 /mnt/SummaModusOperandi -o rw,_netdev,credentials=/home/o5-14/.smbcreds,x-systemd.automount,uid=1000,gid=1000,port=4455
            ;;
        lan)
            if [ -z "$2" ]; then
                echo "Usage: rsl lan <remote_user>"
                return 1
            fi
            ssh -p 4812 "$2"@192.168.0.93
            ;;
        ssh)
            if [ -z "$2" ]; then
                echo "Usage: rsl ssh <remote_user>"
                return 1
            fi
            ssh -p 4812 "$2"@rsl-server.duckdns.org
            ;;
        irc)
            irs -c rsl-server.duckdns.org -p 6667
            ;;
        *)
            echo "Usage: rsl {status|scp-get|scp-send|nas|smb|lan|ssh|irc}"
            return 1
            ;;
    esac
}

# Simple QEMU shortcuts
function qemu-run() {
    case "$1" in
        tos)
            cd ~/VirtualBox/TempleOS; ./run.sh ./TOS.img 
            ;;
        wxp)
            cd ~/VirtualBox/WXPP; ./run.sh ./WXPP.img
            ;;
        kali)
            cd ~/VirtualBox/KL; ./run.sh ./KL.qcow2
            ;;
        *)
            echo "Usage: qemu-run {tos|wxp|kali}"
            return 1
            ;;
    esac
}

# Simple common app aliases
function cma() {
    case "$1" in 
        paint)
            nhd pinta ~/Pictures/canvas.png
            exit 0
            ;;
        tracker)
            cd ~/Tools/MilkyTracker; nhd ./MilkyTracker.AppImage
            exit 0
            ;;
        factorio)
            cd ~/Games/Factorio/bin/x64; nhd ./factorio
            exit 0
            ;;
        *)
            echo "ERROR: Wrong entry"
            echo "Usage: cma {paint|tracker}"
            return 1
            ;;
    esac
}

function christmas-tree() {
    curl https://raw.githubusercontent.com/sergiolepore/ChristBASHTree/master/tree-EN.sh | bash
}

function update-grub() {
#      sudo rm /boot/efi/EFI/fedora/grub.cfg
# UEFI
      sudo grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
# BIOS
      #sudo grub2-mkconfig -o /boot/grub2/grub.cfg
}

# Updates the spicetify 
function update-spicetify(){
    sudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify
    sudo chmod a+wr -R /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/Apps
    spicetify
    spicetify update
    spicetify backup apply
}
